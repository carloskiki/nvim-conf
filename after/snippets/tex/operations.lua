local in_mathzone = function()
    return vim.fn['vimtex#syntax#in_mathzone']() == 1
end

return {
    -- Common math operations
    s({ trig = "sr", snippetType = "autosnippet", wordTrig=false }, { t("^{2}") }, { condition = in_mathzone }),
    s({ trig = "cb", snippetType = "autosnippet", wordTrig=false }, { t("^{3}") }, { condition = in_mathzone }),
    s({ trig = "rd", snippetType = "autosnippet", wordTrig=false }, { t("^{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "_", snippetType = "autosnippet", wordTrig=false }, { t("_{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "sts", snippetType = "autosnippet", wordTrig=false }, { t("_\\text{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "sq", snippetType = "autosnippet", wordTrig=false }, { t("\\sqrt{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "//", snippetType = "autosnippet", wordTrig=false }, { t("\\frac{"), i(1), t("}{"), i(2), t("}") },
        { condition = in_mathzone }),
    s({ trig = "ee", snippetType = "autosnippet" }, { t("e^{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "conj", snippetType = "autosnippet", wordTrig=false }, { t("^{*}") }, { condition = in_mathzone }),
    s({ trig = "trace", snippetType = "autosnippet" }, { t("\\mathrm{Tr}") }, { condition = in_mathzone }),
    s({ trig = "det", snippetType = "autosnippet" }, { t("\\det") }, { condition = in_mathzone }),
    s({ trig = "re", snippetType = "autosnippet" }, { t("\\mathrm{Re}") }, { condition = in_mathzone }),
    s({ trig = "im", snippetType = "autosnippet" }, { t("\\mathrm{Im}") }, { condition = in_mathzone }),
    s({ trig = "hr=", snippetType = "autosnippet" }, { t("\\overset{H.R.}{=}") }, { condition = in_mathzone }),
    -- Accents and fonts
    s({ trig = "([a-zA-Z]),%.", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\mathbf{"), f(function(_, snip) return snip.captures[1] end), t("}") }, { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])%.,", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\mathbf{"), f(function(_, snip) return snip.captures[1] end), t("}") }, { condition = in_mathzone }),
    s({ trig = "([A-Za-z])(%d)", snippetType = "autosnippet", trigEngine = "pattern" },
        { f(function(_, snip) return snip.captures[1] .. "_{" .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "\\hat{([A-Za-z])}(%d)", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\hat{"), f(function(_, snip) return snip.captures[1] .. "}_{" .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "\\mathbf{([A-Za-z])}(%d)", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\mathbf{"), f(function(_, snip) return snip.captures[1] .. "}_{" .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "\\vec{([A-Za-z])}(%d)", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\vec{"), f(function(_, snip) return snip.captures[1] .. "}_{" .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])ddot", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\ddot{"), f(function(_, snip) return snip.captures[1] end), t("}"), }, { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])ddot", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\ddot{"), f(function(_, snip) return snip.captures[1] end), t("}"), }, { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])vec", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\vec{"), f(function(_, snip) return snip.captures[1] end), t("}"), }, { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])und", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\underline{"), f(function(_, snip) return snip.captures[1] end), t("}"), }, { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])hat", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\hat{"), f(function(_, snip) return snip.captures[1] end), t("}"), }, { condition = in_mathzone }),
    s({ trig = "([a-zA-Z])bar", snippetType = "autosnippet", trigEngine = "pattern" },
        { t("\\bar{"), f(function(_, snip) return snip.captures[1] end), t("}"), }, { condition = in_mathzone }),
    s({ trig = "bar", snippetType = "autosnippet" }, { t("\\bar{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "hat", snippetType = "autosnippet" }, { t("\\hat{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "dot", snippetType = "autosnippet" }, { t("\\dot{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "ddot", snippetType = "autosnippet" }, { t("\\ddot{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "vec", snippetType = "autosnippet" }, { t("\\vec{"), i(1), t("}") }, { condition = in_mathzone }),
    s({ trig = "und", snippetType = "autosnippet" }, { t("\\underline{"), i(1), t("}") },
        { condition = in_mathzone }),
    -- Derivaties
    s({ trig = "lim", snippetType = "autosnippet" }, { t("\\lim_{"), i(1, "n"), t("\\to"), i(2, "\\infty"), t("}") },
        { condition = in_mathzone }),
    s("par", { t("\\frac{ \\partial "), i(1, "y"), t("}{ \\partial "), i(2, "x"), t("}"), },
        { condition = in_mathzone }),
    s({ trig = "pa2", snippetType = "autosnippet" }, { t("\\frac{ \\partial^{2} ${0:y} }{ \\partial ${1:x}^{2} } $2") },
        { condition = in_mathzone }),
    s({ trig = "pa3", snippetType = "autosnippet" }, { t("\\frac{ \\partial^{3} ${0:y} }{ \\partial ${1:x}^{3} } $2") },
        { condition = in_mathzone }),
    s({ trig = "ddt", snippetType = "autosnippet" }, { t("\\frac{d}{dt} ") }, { condition = in_mathzone }),
    s({ trig = "pa([A-Za-z])([A-Za-z])", trigEngine = "pattern" },
        { t("\\frac{ \\partial "),
            f(function(_, snip) return snip.captures[1] .. "}_{ \\partial " .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "pa([A-Za-z])([A-Za-z])2", trigEngine = "pattern", snippetType = "autosnippet" },
        { t("\\frac{ \\partial "),
            f(function(_, snip) return snip.captures[1] .. "^2}_{ \\partial " .. snip.captures[2] .. "^2}" end) },
        { condition = in_mathzone }),
    s({ trig = "de([A-Za-z])([A-Za-z])", trigEngine = "pattern" },
        { t("\\frac{ d "), f(function(_, snip) return snip.captures[1] .. "}_{ d " .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "de([A-Za-z])([A-Za-z])2", trigEngine = "pattern", snippetType = "autosnippet" },
        { t("\\frac{ d^{2} "),
            f(function(_, snip) return snip.captures[1] .. "}_{ d^{2} " .. snip.captures[2] .. "}" end) },
        { condition = in_mathzone }),
    s({ trig = "pa([A-Za-z])([A-Za-z])([A-Za-z])", trigEngine = "pattern" },
        { t("\\frac{ \\partial "),
            f(function(_, snip)
                return snip.captures[1] ..
                    "}_{ \\partial " .. snip.captures[2] .. "\\partial " .. snip.captures[3] .. "}"
            end) },
        { condition = in_mathzone }),
    -- Integrals
    s({ trig = "oinf", snippetType = "autosnippet" }, { t("\\int_{0}^{\\infty}"), i(1), t(" \\, d"), i(2, "x") },
        { condition = in_mathzone }),
    s({ trig = "infi", snippetType = "autosnippet" }, { t("\\int_{-\\infty}^{\\infty}"), i(1), t(" \\, d"), i(2, "x") },
        { condition = in_mathzone }),
    s({ trig = "dint", snippetType = "autosnippet" },
        { t("\\int_{"), i(1, "0"), t("}^{"), i(2, "\\infty"), t("}"), i(3), t(" \\, d"), i(4, "x") },
        { condition = in_mathzone }),
    s({ trig = "oint", snippetType = "autosnippet" }, { t("\\oint") }, { condition = in_mathzone }),
    s({ trig = "iiint", snippetType = "autosnippet" }, { t("\\iiint") }, { condition = in_mathzone }),
    s({ trig = "iint", snippetType = "autosnippet" }, { t("\\iint") }, { condition = in_mathzone }),
    s({ trig = "int", snippetType = "autosnippet" }, { t("\\int"), i(1), t(" \\, d"), i(2, "x") },
        { condition = in_mathzone }),

    -- Miscellaneous
    s({ trig = "binom", snippetType = "autosnippet" }, { t("\\binom{"), i(1), t("}{"), i(2), t("}") },
        { condition = in_mathzone }),
    s({ trig = "t->", snippetType = "autosnippet" }, { t("\\xrightarrow{"), i(1), t("}") }, { condition = in_mathzone }),
}
